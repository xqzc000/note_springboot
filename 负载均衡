#### 1.准备
- a.注册中心
配置和关键代码如下：
```
@EnableEurekaServer
@SpringBootApplication
public class DemoApplication {

	public static void main(String[] args) {
		SpringApplication.run(DemoApplication.class, args);
	}

}
//application.xml
spring.application.name=eureka-server
server.port=11111

eureka.instance.hostname= localhost
#不向自己注册服务
eureka.client.register-with-eureka=false
#不检索服务
eureka.client.fetch-registry=false
eureka.client.serviceUrl.defaultZone=http://${eureka.instance.hostname}:${server.port}/eureka

//pom.xml
	<dependencies>
<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-ribbon</artifactId>
		</dependency>

	<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>
		</dependency>
	</dependencies>


<properties>
		<java.version>1.8</java.version>
		<spring-cloud.version>Greenwich.SR1</spring-cloud.version>
	</properties>



	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

```

启动注册中心服务。浏览器访问：http://localhost:11111/

- b.注册客户端

```
//注册客户端 （生成者）
//@EnableEurekaClient
@SpringBootApplication
public class DemoApplication {

	public static void main(String[] args) {
		SpringApplication.run(DemoApplication.class, args);

	}

}

@RestController
public class DemoController {
 // 打包成jar的内容，注册到同一个注册中心。
    @RequestMapping(value = "/")
    String hello(){
        System.out.println("hello");
        return "helloworld";
    }

    private final AtomicLong counter = new AtomicLong();
    @RequestMapping(value="/login" ,method=RequestMethod.POST,consumes = "application/json",produces = "application/json")
    String getName(@RequestBody String name){

        System.out.println(name);
        return "{\"name\":\"zhangsan\",\"age\":\"10\",\"ResponseCode\":\"AAAAAAA\"}";
    }

    @RequestMapping(value="/get" ,method= GET)
    String get(){

        return "{\"name\":\"zhangsan\",\"age\":\"10\",\"ResponseCode\":\"AAAAAAA\"}";
    }


    @RequestMapping(value="/download/{id}",method= GET)
    ResponseEntity<InputStreamResource> download(@PathVariable String id) throws Exception {

        String filePath = "/Users/zhengjian/Desktop/"+id+".mp4";
        FileSystemResource file = new FileSystemResource(filePath);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Cache-Control", "no-cache, no-store, must-revalidate");
        headers.add("Content-Disposition", String.format("attachment; filename=\"%s\"", file.getFilename()));
        headers.add("Pragma", "no-cache");
        headers.add("Expires", "0");

        return ResponseEntity
                .ok()
                .headers(headers)
                .contentLength(file.contentLength())
                .contentType(MediaType.parseMediaType("application/octet-stream"))
                .body(new InputStreamResource(file.getInputStream()));
    }
}

//pom.xml
<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
		</dependency>
 <dependency>
			<!--web项目-->
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<plugins>
			<plugin>
				<!--打包用-->
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>

	</build>
//打包成jar
<packaging>jar</packaging>


```
```
spring.application.name=hello-world

server.port=9001
server.servlet.context-path=/

book.name="hello world"
book.author="miky"

info.app.name="haha"
info.app.version="version1"


#management.endpoint.端口名.属性=值

#management.endpoint.<id>.enabled to true or false 设置是否使用
#management.endpoint.beans.enabled=true
#management.endpoint.mappings.enabled=true
management.endpoint.metrics.enabled=true

#http://localhost:9000/actuator/ 查看监控打开信息

management.endpoints.web.exposure.include=health,info,metrics
#management.endpoints.web.exposure.include=*  //打开所有监控

#安全
#
#spring.security.user.name= miky
#
#spring.security.user.password= 123

#注册中心
eureka.client.serviceUrl.defaultZone=http://localhost:11111/eureka
#设置注册中心IP可用
eureka.instance.prefer-ip-address=true
```
打包jar命令
```
控制台输入：$ mvn package
打包完成，系统终端输入：
$ java -jar /Users/xxx/Downloads/demo/target/demo-0.0.1-SNAPSHOT.jar -server.port=8000
$ java -jar /Users/xxx/Downloads/demo/target/demo-0.0.1-SNAPSHOT.jar -server.port=8001

```
启动服务提供者，端口分别是：8000，8001

- c.搜索服务（消费者）
```
//发现服务（消费者）
@EnableDiscoveryClient
@SpringBootApplication
public class DemoApplication {

	@Bean
	@LoadBalanced
	RestTemplate restTemplate(){
		return new RestTemplate();
	}

	public static void main(String[] args) {
		SpringApplication.run(DemoApplication.class, args);

	}

}

@RestController
public class DemoController {
    @Autowired
    RestTemplate restTemplate;
    //浏览器访问http://localhost:9000/test，会在注册中心找HELLO-WORLD服务，
    //并返回根目录 /下的REST接口
    @RequestMapping(value = "/test",method = GET)
    String helloRibbon(){
        return restTemplate.getForEntity("http://HELLO-WORLD/",String.class).getBody();
    }
}

//application.xml
spring.application.name=hello-world
server.port=9001
#注册中心
eureka.client.serviceUrl.defaultZone=http://localhost:11111/eureka

```
启动消费者服务。
浏览器访问：http://localhost:9001/test

可以发现控制台 8000和8001服务轮流打印“hello”

由此可见，实现了负载均衡，具体见ribbon源码解析

